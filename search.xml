<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>eventloop</title>
      <link href="/2020/03/18/eventloop/"/>
      <url>/2020/03/18/eventloop/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文主要介绍与浏览器eventloop与node环境中的eventloop</p></blockquote><a id="more"></a><h2 id="浏览器中的eventloop"><a href="#浏览器中的eventloop" class="headerlink" title="浏览器中的eventloop"></a>浏览器中的eventloop</h2><ul><li>main script运行结束后，会有微任务队列和宏任务队列；</li><li>微任务先执行，执行完队列中的所有微任务；</li><li>拿出宏任务中的第一个任务开始执行，回到第一步</li></ul><p>宏任务：settimeout, setinterval，postMessage，MessageChannel（介个我还没搞懂）</p><p>微任务：promise, async（本质上也是promise),MutationObserver（介个我也没搞懂）</p><p>下面看三个例子：</p><p>1、</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"promise1"</span>)</span><br><span class="line">    resolve()</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"then11"</span>)</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"promise2"</span>)</span><br><span class="line">        resolve()</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"then21"</span>)</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"then23"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"then12"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以上代码的运行结果是：</span></span><br><span class="line"><span class="comment">// promise1</span></span><br><span class="line"><span class="comment">// then11</span></span><br><span class="line"><span class="comment">// promise2</span></span><br><span class="line"><span class="comment">// then21</span></span><br><span class="line"><span class="comment">// then12</span></span><br><span class="line"><span class="comment">// then23</span></span><br></pre></td></tr></table></figure><p>2、</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 跟上面一个例子相比多了一个return</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"promise1"</span>)</span><br><span class="line">    resolve()</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"then11"</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"promise2"</span>)</span><br><span class="line">        resolve()</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"then21"</span>)</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"then23"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"then12"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以上代码的运行结果是：</span></span><br><span class="line"><span class="comment">// promise1</span></span><br><span class="line"><span class="comment">// then11</span></span><br><span class="line"><span class="comment">// promise2</span></span><br><span class="line"><span class="comment">// then21</span></span><br><span class="line"><span class="comment">// then23</span></span><br><span class="line"><span class="comment">// then12</span></span><br></pre></td></tr></table></figure><p>3、</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"async1 start"</span>);</span><br><span class="line">    <span class="keyword">await</span>  async2();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"async1 end"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span>  <span class="function"><span class="keyword">function</span> <span class="title">async2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">'async2'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"script start"</span>);</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"settimeout"</span>);</span><br><span class="line">&#125;,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">async1();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"promise1"</span>);</span><br><span class="line">    resolve();</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"promise2"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'script end'</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 以上代码的运行结果是：</span></span><br><span class="line"><span class="comment">// script start</span></span><br><span class="line"><span class="comment">// async1 start</span></span><br><span class="line"><span class="comment">// async2</span></span><br><span class="line"><span class="comment">// promise1</span></span><br><span class="line"><span class="comment">// script end</span></span><br><span class="line"><span class="comment">// async1 end</span></span><br><span class="line"><span class="comment">// promise2</span></span><br><span class="line"><span class="comment">// settimeout</span></span><br></pre></td></tr></table></figure><h2 id="node中的eventloop"><a href="#node中的eventloop" class="headerlink" title="node中的eventloop"></a>node中的eventloop</h2><p>node有一套自己的模型,process.nextTic或者promise会执行在各个阶段之间<br><img src="https://user-gold-cdn.xitu.io/2019/7/24/16c22bfc3d4eee19?w=1352&h=854&f=png&s=53927" alt="2020-03-23-21-32-55"></p><ul><li>NodeJS中宏队列主要有4个</li></ul><p>Timers Queue</p><p>IO Callbacks Queue</p><p>Check Queue</p><p>Close Callbacks Queue</p><blockquote><p>这4个都属于宏队列，但是在浏览器中，可以认为只有一个宏队列，所有的macrotask都会被加到这一个宏队列中，但是在NodeJS中，不同的macrotask会被放置在不同的宏队列中。</p></blockquote><ul><li>NodeJS中微队列主要有2个：</li></ul><p>Next Tick Queue：是放置process.nextTick(callback)的回调任务的</p><p>Other Micro Queue：放置其他microtask，比如Promise等</p><blockquote><p>在浏览器中，也可以认为只有一个微队列，所有的microtask都会被加到这一个微队列中，但是在NodeJS中，不同的microtask会被放置在不同的微队列中。</p></blockquote><p>参考文档：<br><a href="https://segmentfault.com/a/1190000016278115" target="_blank" rel="noopener">带你彻底弄懂Event Loop</a></p>]]></content>
      
      
      <categories>
          
          <category> 每日学习 </category>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>运动日记(持续更新)</title>
      <link href="/2020/03/16/%E8%BF%90%E5%8A%A8%E6%97%A5%E8%AE%B0-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/"/>
      <url>/2020/03/16/%E8%BF%90%E5%8A%A8%E6%97%A5%E8%AE%B0-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>准备建个页专门用来存运动情况，每天开一个太浪费了。【更新至3.17】</p></blockquote><a id="more"></a><p>3.16：今天偷懒了，只练了<a href="https://www.bilibili.com/video/av50314054?p=3" target="_blank" rel="noopener">美丽芭蕾的瘦腿第三套</a>。今天是周一，明显感觉时间不够用，白天和晚上都有很多工作，准备把早上的时间利用起来，每天早上练习20分钟的体态训练吧，加油。</p><p>3.17 腰部+手臂+hiit燃脂+肩颈拉伸</p>]]></content>
      
      
      <categories>
          
          <category> 习惯养成计划 </category>
          
          <category> 运动 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运动 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>运动日记(四)</title>
      <link href="/2020/03/15/%E8%BF%90%E5%8A%A8%E6%97%A5%E8%AE%B0-%E5%9B%9B/"/>
      <url>/2020/03/15/%E8%BF%90%E5%8A%A8%E6%97%A5%E8%AE%B0-%E5%9B%9B/</url>
      
        <content type="html"><![CDATA[<blockquote><p>【3月15日】 背部、肩部、舒缓运动</p></blockquote><a id="more"></a><p>最近身体状态比较特殊啦，多以舒缓和上身小运动为主！希望可以坚持下来！fighting！</p><p>一组背部运动<a href="https://www.bilibili.com/video/av88812230" target="_blank" rel="noopener">B站美背大法-坚持4天</a></p><p>一组手臂运动<a href="https://www.bilibili.com/video/av90866754" target="_blank" rel="noopener">B站手臂运动-坚持4天</a></p><p>一组肩背手臂拉伸<a href="https://www.bilibili.com/video/av92672384" target="_blank" rel="noopener">8分钟改善【斜方肌肥厚】拉伸打造-坚持3天</a></p>]]></content>
      
      
      <categories>
          
          <category> 习惯养成计划 </category>
          
          <category> 运动 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运动 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>运动日记(三)</title>
      <link href="/2020/03/14/%E8%BF%90%E5%8A%A8%E6%97%A5%E8%AE%B0-%E4%B8%89/"/>
      <url>/2020/03/14/%E8%BF%90%E5%8A%A8%E6%97%A5%E8%AE%B0-%E4%B8%89/</url>
      
        <content type="html"><![CDATA[<blockquote><p>【3月14日】 背部、肩部、手臂</p></blockquote><a id="more"></a><p>最近身体状态比较特殊啦，多以舒缓和上身小运动为主！希望可以坚持下来！fighting！</p><p>一组背部运动<a href="https://www.bilibili.com/video/av88812230" target="_blank" rel="noopener">B站美背大法-坚持3天</a></p><p>一组手臂运动<a href="https://www.bilibili.com/video/av90866754" target="_blank" rel="noopener">B站手臂运动-坚持3天</a></p><p>一组肩部运动<a href="https://www.bilibili.com/video/av92583471" target="_blank" rel="noopener">甩掉斜方肌-坚持1天</a></p><p>一组肩背手臂拉伸<a href="https://www.bilibili.com/video/av92672384" target="_blank" rel="noopener">8分钟改善【斜方肌肥厚】拉伸打造-坚持2天</a></p>]]></content>
      
      
      <categories>
          
          <category> 习惯养成计划 </category>
          
          <category> 运动 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运动 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>https相关</title>
      <link href="/2020/03/14/https%E7%9B%B8%E5%85%B3/"/>
      <url>/2020/03/14/https%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文主要介绍与http相比，https的特性以及实现原理</p></blockquote><a id="more"></a><h2 id="HTTP的缺点"><a href="#HTTP的缺点" class="headerlink" title="HTTP的缺点"></a>HTTP的缺点</h2><ol><li>明文传输，信息易被截取</li><li>发送和接收方不会验证报文完整和一致性</li><li>互相不会验证对方身份</li></ol><h2 id="HTTPS做了什么"><a href="#HTTPS做了什么" class="headerlink" title="HTTPS做了什么"></a>HTTPS做了什么</h2><ol><li>数据加密传输</li><li>数据一致性</li><li>身份认证</li></ol><h2 id="HTTPS是怎么做到的"><a href="#HTTPS是怎么做到的" class="headerlink" title="HTTPS是怎么做到的"></a>HTTPS是怎么做到的</h2><p>HTTPS = SSL(TSL) + HTTP<br>即：在http和tcp之间添加了一层SSL安全层，SSL来负责安全部分，内核仍然是http。<br><img src="http://q780g4x9h.bkt.clouddn.com/2020-03-15-14-08-15.png" width="50%" height="50%"></p><p>tips: https默认端口号443，http默认端口号80</p><h2 id="SSL（TSL）是怎么做到的"><a href="#SSL（TSL）是怎么做到的" class="headerlink" title="SSL（TSL）是怎么做到的"></a>SSL（TSL）是怎么做到的</h2><ol><li>数据加密传输</li></ol><ul><li><p>对称加密和非对称加密 </p><table><thead><tr><th>-</th><th align="center">对称加密</th><th align="center">非对称加密</th><th align="center">例子</th></tr></thead><tbody><tr><td>定义</td><td align="center">服务端和客户端加密解密使用相同密钥</td><td align="center">客户端使用公钥进行信息加密，服务端使用独有的密钥进行解密</td><td align="center">DES, AES, ChaCha20</td></tr><tr><td>优点</td><td align="center">速度快</td><td align="center">安全性高</td><td align="center">RSA, ECC</td></tr><tr><td>缺点</td><td align="center">密钥会在客户端和服务端之间传输，密钥可能会被拦截，有安全漏洞</td><td align="center">加密算法复杂，加密速度慢</td><td align="center"></td></tr></tbody></table></li><li><p>SSL的数据加密方式——混合加密</p><p>综上表格优缺点，SSL采用对称加密和非对称加密结合的混合加密——<strong>数据传输采用对称加密，对对称加密的密钥采用非对称加密</strong></p><img src="http://q780g4x9h.bkt.clouddn.com/2020-03-15-14-09-24.png" width="50%" height="50%"></li></ul><ol start="2"><li>数据一致性</li></ol><ul><li>摘要算法（哈希算法）：它表示输入任意长度的数据，输出固定长度的数据，相同的输入数据始终得到相同的输出，不同的输入数据尽量得到不同的输出。</li><li>SSL的数据一致性方式——利用摘要算法：客服端加加密数据和哈希结果传给服务端，服务端解密数据也计算哈希结果，如果两者一致，则数据一致。<blockquote><p>现在安全性较高的摘要算法是HAMC<br>MAC: MAC 的全称是message authentication code，它通过 MAC 算法从消息和密钥生成，MAC 值允许验证者（也拥有秘密密钥）检测到消息内容的任何更改，从而保护了消息的数据完整性。<br>HMAC：MAC + HASH组合。HMAC 的计算中可以使用任何加密哈希函数，例如 SHA-256 等。</p></blockquote></li></ul><img src="http://q780g4x9h.bkt.clouddn.com/2020-03-15-14-21-53.png" width="50%" height="50%"><ol start="3"><li>身份认证</li></ol><ul><li>为认证公钥的合法性，引入权威的第三方机构CA(如沃通CA)。CA负责核实公钥的拥有者的信息，并颁发认证”证书”，同时能够为使用者提供证书验证服务</li><li>CA认证流程<ul><li>服务端将【服务商公钥 + 组织信息 + 个人信息等信息】提交给CA机构进行认证申请</li><li>CA审核确定合法后，会颁发证书，证书中包含【服务商公钥 + 服务商明文信息 + 签名】<ul><li>签名：将【服务商明文信息】经过哈希算法生成【哈希后的摘要】再经过CA的私钥加密生成【签名】</li></ul></li><li>客服端请求时，服务端会返回给客户端证书</li><li>客户端将【服务商明文信息】利用哈希算法生成【哈希后的摘要A】，将证书中返回的【签名】利用CA公钥解密得到【摘要B】，比较【摘要A】和【摘要B】，如果相同则可以确认证书的合法性，即公钥合法<ul><li>tips: CA的公钥内置在客户端内</li></ul></li><li>客户端检查证书中明文信息里的证书时间，授权信息等是否正常，如果一切正常，开始之后的数据交互<img src="http://q780g4x9h.bkt.clouddn.com/2020-03-15-14-26-14.png" width="50%" height="50%"></li></ul></li></ul><p>参考文章：<br><a href="https://juejin.im/post/5e6c4458518825491b11e082#heading-8" target="_blank" rel="noopener">看完这篇 HTTPS，和面试官扯皮就没问题了</a><br><a href="https://juejin.im/post/5af557a3f265da0b9265a498#heading-29" target="_blank" rel="noopener">HTTP和HTTPS详解</a></p>]]></content>
      
      
      <categories>
          
          <category> 每日学习 </category>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>运动日记(二)</title>
      <link href="/2020/03/13/%E8%BF%90%E5%8A%A8%E6%97%A5%E8%AE%B0-%E4%BA%8C/"/>
      <url>/2020/03/13/%E8%BF%90%E5%8A%A8%E6%97%A5%E8%AE%B0-%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<blockquote><p>【3月13日】 背部、手臂、肩颈拉伸</p></blockquote><a id="more"></a><p>最近身体状态比较特殊啦，多以舒缓和上身小运动为主！希望可以坚持下来！fighting！</p><p>一组背部运动<a href="https://www.bilibili.com/video/av88812230" target="_blank" rel="noopener">B站美背大法-坚持2天</a></p><p>一组手臂运动<a href="https://www.bilibili.com/video/av90866754" target="_blank" rel="noopener">B站手臂运动-坚持2天</a></p><p>一组肩背手臂拉伸<a href="https://www.bilibili.com/video/av92672384" target="_blank" rel="noopener">8分钟改善【斜方肌肥厚】拉伸打造-坚持1天</a></p>]]></content>
      
      
      <categories>
          
          <category> 习惯养成计划 </category>
          
          <category> 运动 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运动 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>运动日记(一)</title>
      <link href="/2020/03/12/%E8%BF%90%E5%8A%A8%E6%97%A5%E8%AE%B0-%E4%B8%80/"/>
      <url>/2020/03/12/%E8%BF%90%E5%8A%A8%E6%97%A5%E8%AE%B0-%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<blockquote><p>【3月12日】 背部、肩部、手臂</p></blockquote><a id="more"></a><p>最近身体状态比较特殊啦，多以舒缓和上身小运动为主！希望可以坚持下来！fighting！</p><p>一组肩部和背部热身 <a href="https://www.bilibili.com/video/av24009054" target="_blank" rel="noopener">B站美丽芭蕾-累计1天</a></p><p>一组背部运动<a href="https://www.bilibili.com/video/av88812230" target="_blank" rel="noopener">B站美背大法-坚持1天</a></p><p>一组手臂运动<a href="https://www.bilibili.com/video/av90866754" target="_blank" rel="noopener">B站手臂运动-坚持1天</a></p>]]></content>
      
      
      <categories>
          
          <category> 习惯养成计划 </category>
          
          <category> 运动 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运动 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
